
let ckt = load_exe "rbfifo_yosys.exe";
load "gsteSymReduce.fl";
loadModel ckt;
let vertexI = Vertex 0;
let vertexL = [Vertex 0,Vertex 1,Vertex 3,Vertex 4,Vertex 5,Vertex 6,Vertex 7,Vertex 8,Vertex 9,Vertex 10];
let edgeL = [Edge (Vertex 0) (Vertex 1),Edge (Vertex 1) (Vertex 1),Edge (Vertex 3) (Vertex 3),Edge (Vertex 5) (Vertex 5),Edge (Vertex 7) (Vertex 7),Edge (Vertex 9) (Vertex 9),Edge (Vertex 1) (Vertex 3),Edge (Vertex 3) (Vertex 5),Edge (Vertex 5) (Vertex 7),Edge (Vertex 7) (Vertex 9),Edge (Vertex 9) (Vertex 7),Edge (Vertex 7) (Vertex 5),Edge (Vertex 5) (Vertex 3),Edge (Vertex 3) (Vertex 1),Edge (Vertex 1) (Vertex 4),Edge (Vertex 3) (Vertex 6),Edge (Vertex 5) (Vertex 8),Edge (Vertex 7) (Vertex 10),Edge (Vertex 10) (Vertex 8),Edge (Vertex 8) (Vertex 6),Edge (Vertex 6) (Vertex 4),Edge (Vertex 4) (Vertex 1)];
let ant aEdge = 
	val (Edge (Vertex from) (Vertex to)) = aEdge
	in 
	((from = 0) AND (to = 1)) => TAndList [Is1 "rst",Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 1) AND (to = 1)) => TAndList [Is0 "rst",Is0 "push",Is0 "pop",Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 3) AND (to = 3)) => TAndList [Is0 "rst",Is0 "push",Is0 "pop",Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 5) AND (to = 5)) => TAndList [Is0 "rst",Is0 "push",Is0 "pop",Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 7) AND (to = 7)) => TAndList [Is0 "rst",Is0 "push",Is0 "pop",Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 9) AND (to = 9)) => TAndList [Is0 "rst",Is0 "push",Is0 "pop",Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 1) AND (to = 3)) => TAndList [Is0 "rst",Is1 "push",Is0 "pop",Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 3) AND (to = 5)) => TAndList [Is0 "rst",Is1 "push",Is0 "pop",Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 5) AND (to = 7)) => TAndList [Is0 "rst",Is1 "push",Is0 "pop",Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 7) AND (to = 9)) => TAndList [Is0 "rst",Is1 "push",Is0 "pop",Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 9) AND (to = 7)) => TAndList [Is0 "rst",Is0 "push",Is1 "pop",Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 7) AND (to = 5)) => TAndList [Is0 "rst",Is0 "push",Is1 "pop",Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 5) AND (to = 3)) => TAndList [Is0 "rst",Is0 "push",Is1 "pop",Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 3) AND (to = 1)) => TAndList [Is0 "rst",Is0 "push",Is1 "pop",Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 1) AND (to = 4)) => TAndList [Is0 "rst",Is1 "push",Is0 "pop",Guard (bvariable "din<1>") (Is1 "dataIn<1>"),Guard ((bNOT (bvariable "din<1>"))) (Is0 "dataIn<1>"),Guard (bvariable "din<0>") (Is1 "dataIn<0>"),Guard ((bNOT (bvariable "din<0>"))) (Is0 "dataIn<0>"),Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 3) AND (to = 6)) => TAndList [Is0 "rst",Is1 "push",Is0 "pop",Guard (bvariable "din<1>") (Is1 "dataIn<1>"),Guard ((bNOT (bvariable "din<1>"))) (Is0 "dataIn<1>"),Guard (bvariable "din<0>") (Is1 "dataIn<0>"),Guard ((bNOT (bvariable "din<0>"))) (Is0 "dataIn<0>"),Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 5) AND (to = 8)) => TAndList [Is0 "rst",Is1 "push",Is0 "pop",Guard (bvariable "din<1>") (Is1 "dataIn<1>"),Guard ((bNOT (bvariable "din<1>"))) (Is0 "dataIn<1>"),Guard (bvariable "din<0>") (Is1 "dataIn<0>"),Guard ((bNOT (bvariable "din<0>"))) (Is0 "dataIn<0>"),Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 7) AND (to = 10)) => TAndList [Is0 "rst",Is1 "push",Is0 "pop",Guard (bvariable "din<1>") (Is1 "dataIn<1>"),Guard ((bNOT (bvariable "din<1>"))) (Is0 "dataIn<1>"),Guard (bvariable "din<0>") (Is1 "dataIn<0>"),Guard ((bNOT (bvariable "din<0>"))) (Is0 "dataIn<0>"),Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 10) AND (to = 8)) => TAndList [Is0 "rst",Is0 "push",Is1 "pop",Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 8) AND (to = 6)) => TAndList [Is0 "rst",Is0 "push",Is1 "pop",Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 6) AND (to = 4)) => TAndList [Is0 "rst",Is0 "push",Is1 "pop",Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 4) AND (to = 1)) => TAndList [Is0 "rst",Is0 "push",Is1 "pop",Is0 "CLK",Next (Is1 "CLK")] 
	| error "In cons: missing case"
;

let cons aEdge = 
	val (Edge (Vertex from) (Vertex to)) = aEdge
	in 
	((from = 0) AND (to = 1)) => TAndList [] 
	| ((from = 1) AND (to = 1)) => TAndList [Is1 "empty",Is0 "full"] 
	| ((from = 3) AND (to = 3)) => TAndList [Is0 "empty",Is0 "full"] 
	| ((from = 5) AND (to = 5)) => TAndList [Is0 "empty",Is0 "full"] 
	| ((from = 7) AND (to = 7)) => TAndList [Is0 "empty",Is0 "full"] 
	| ((from = 9) AND (to = 9)) => TAndList [Is0 "empty",Is1 "full"] 
	| ((from = 1) AND (to = 3)) => TAndList [Is1 "empty",Is0 "full"] 
	| ((from = 3) AND (to = 5)) => TAndList [Is0 "empty",Is0 "full"] 
	| ((from = 5) AND (to = 7)) => TAndList [Is0 "empty",Is0 "full"] 
	| ((from = 7) AND (to = 9)) => TAndList [Is0 "empty",Is0 "full"] 
	| ((from = 9) AND (to = 7)) => TAndList [Is0 "empty",Is1 "full"] 
	| ((from = 7) AND (to = 5)) => TAndList [Is0 "empty",Is0 "full"] 
	| ((from = 5) AND (to = 3)) => TAndList [Is0 "empty",Is0 "full"] 
	| ((from = 3) AND (to = 1)) => TAndList [Is0 "empty",Is0 "full"] 
	| ((from = 1) AND (to = 4)) => TAndList [Is1 "empty",Is0 "full"] 
	| ((from = 3) AND (to = 6)) => TAndList [Is0 "empty",Is0 "full"] 
	| ((from = 5) AND (to = 8)) => TAndList [Is0 "empty",Is0 "full"] 
	| ((from = 7) AND (to = 10)) => TAndList [Is0 "empty",Is0 "full"] 
	| ((from = 10) AND (to = 8)) => TAndList [Is0 "empty",Is1 "full"] 
	| ((from = 8) AND (to = 6)) => TAndList [Is0 "empty",Is0 "full"] 
	| ((from = 6) AND (to = 4)) => TAndList [] 
	| ((from = 4) AND (to = 1)) => TAndList [Guard (bvariable "din<1>") (Is1 "dataOut<1>"),Guard ((bNOT (bvariable "din<1>"))) (Is0 "dataOut<1>"),Guard (bvariable "din<0>") (Is1 "dataOut<0>"),Guard ((bNOT (bvariable "din<0>"))) (Is0 "dataOut<0>")] 
	| error "In cons: missing case"
;


// tag invariants
let vOfDataIn = [bvariable "din<1>", bvariable "din<0>"];
let myMem i= map (\j. ("mem<"^(int2str i)^"><"^(int2str j)^">")) (1 downto 0);
let mem_i_is_D i D = (myMem i) bvAre D;
let memIs i= 
    mem_i_is_D i vOfDataIn
	//TAndList [Is0 ("mem<"^(int2str i)^"><1>"), Is1 ("mem<"^(int2str i)^"><0>")]
;

let head = map (\i. ("head<" ^ (int2str i) ^ ">")) (0 upto 1);
let tail = map (\i. ("tail<" ^ (int2str i) ^ ">")) (0 upto 1);
	
let headIs adr = 
	letrec tobool n size=
		(size = 0) => []
		| (n%2): (tobool (n/2) (size-1)) in
	TAndList (map2 (\i.\j. (i=0) => (Is0 (el (j+1) head)) | (Is1 (el (j+1) head))) (tobool adr 2) (0 upto 1))
;
let tailIs adr = 
	letrec tobool n size=
		(size = 0) => []
		| (n%2): (tobool (n/2) (size-1)) in
	TAndList (map2 (\i.\j. (i=0) => (Is0 (el (j+1) tail)) | (Is1 (el (j+1) tail))) (tobool adr 2) (0 upto 1))
;

let full = Is1 "full";
let nfull = Is0 "full";
let empty = Is1 "empty";
let nempty = Is0 "empty";

let tag aVert=
	val (Vertex n) = aVert in
	(n = 0) => []
	| (n=1) => [[empty, nfull, tailIs 0, headIs 0], [empty, nfull, tailIs 1, headIs 1], [empty, nfull, tailIs 2, headIs 2], [empty, nfull, tailIs 3, headIs 3] ]
	| (n=3) => [[nempty, nfull, tailIs 1, headIs 0], [nempty, nfull, tailIs 2, headIs 1], [nempty, nfull, tailIs 3, headIs 2], [nempty, nfull, tailIs 0, headIs 3]]
	| (n=5) => [[nempty, nfull, tailIs 2, headIs 0], [nempty, nfull, tailIs 3, headIs 1], [nempty, nfull, tailIs 0, headIs 2], [nempty, nfull, tailIs 1, headIs 3]]
	| (n=7) => [[nempty, nfull, tailIs 3, headIs 0], [nempty, nfull, tailIs 0, headIs 1], [nempty, nfull, tailIs 1, headIs 2], [nempty, nfull, tailIs 2, headIs 3]]
	| (n=9) => [[nempty, full, tailIs 0, headIs 0], [nempty, full, tailIs 1, headIs 1], [nempty, full, tailIs 2, headIs 2], [nempty, full, tailIs 3, headIs 3]]
	| (n=10) => [[nempty, full, tailIs 0, headIs 0, memIs 3], [nempty, full, tailIs 1, headIs 1, memIs 0], [nempty, full, tailIs 2, headIs 2, memIs 1], [nempty, full, tailIs 3, headIs 3, memIs 2]]
	| (n=8) => [[nempty, nfull, tailIs 3, headIs 0, memIs 2], [nempty, nfull, tailIs 0, headIs 1, memIs 3], [nempty, nfull, tailIs 1, headIs 2, memIs 0], [nempty, nfull, tailIs 2, headIs 3, memIs 1]]
	| (n=6) => [[nempty, nfull, tailIs 2, headIs 0, memIs 1], [nempty, nfull, tailIs 3, headIs 1, memIs 2], [nempty, nfull, tailIs 0, headIs 2, memIs 3], [nempty, nfull, tailIs 1, headIs 3, memIs 0]]
	| (n=4) => [[nempty, nfull, tailIs 1, headIs 0, memIs 0], [nempty, nfull, tailIs 2, headIs 1, memIs 1], [nempty, nfull, tailIs 3, headIs 2, memIs 2], [nempty, nfull, tailIs 0, headIs 3, memIs 3]]
	| error "no such node"
;

let steSymbSimGoalfDirct ckt goal =
    	val (Goal bAnts assert) = goal 
in    val (TImply ant cons) = assert 
in    let ant = trajForm2FiveTuples ant 
in    let bP = itlist (\bant. \b. bant bAND b) bAnts bT 
in    let cons = trajForm2FiveTuples (Guard bP cons) 
then
  	//print ("ant\n"^(trajFiveTuple2Str ant)^"\n") fseq
  	//print ("cons\n"^(trajFiveTuple2Str cons)^"\n") fseq
   	(STE "-w -y -S"  ckt [] ant cons []) => T  
|	F
;

letrec check_helper [] ant0 = F
/\ check_helper (cons0:conss) ant0 =
	let tmpGoal = (Goal [] (TImply ant0 (cons0))) in
	(steSymbSimGoalfDirct ckt tmpGoal) => T 
	| check_helper conss ant0
;
letrec check_next_ant conss [] = T 
/\ check_next_ant conss (ant:antss) =
	let res = check_helper conss ant in
	res => check_next_ant conss antss
	| F
;
let check aEdge = 
	val (Edge from to) = aEdge in
	val (Vertex n) = from in
	val (Vertex n') = to in
	let antss = map (\x. TAndList ((ant aEdge): x)) (tag from) in
	let conss = map (\x. TAndList ((cons aEdge):(map Next x))) (tag to) in
	check_next_ant conss antss => T 
	| F
;

let test void =
    let dataOut = ["dataOut<1>", "dataOut<0>"] in
	let a =  TAndList [Is0 "rst",Is0 "push",Is1 "pop",Is0 "CLK",Next (Is1 "CLK")] in
	let ta = TAndList [nempty, nfull, tailIs 1, headIs 0, memIs 0] in
	let c = (dataOut bvAre vOfDataIn) in
	let tc = Next (TAndList [empty, nfull, tailIs 1, headIs 1]) in
    let aant = TAndList [a, ta] in
    let ccon = TAndList [c, tc] in
    let ats = trajForm2FiveTuples aant in
    let cns = trajForm2FiveTuples ccon in
    let trace_vals = [("dataOut<0>", 0, 4), ("dataOut<1>", 0, 4) ] 
    then 
        //(STE "-w -y -S" ckt [] ats cns trace_vals)
        //fseq
        //let v1 = get_trace_val ckt "dataOut<1>" 4 in
        //v1
        (STE "-w -y -S" ckt [] ats cns trace_vals) => T
        | F
;

//itlist (\x. \y. x AND y) (map (\e. check e) edgeL) T;
//print (trajForm2Str (memIs 3));
//check (Edge (Vertex 0) (Vertex 1));
//check (Edge (Vertex 1) (Vertex 3));
test 1;
//check (Edge (Vertex 3) (Vertex 5));
//check (Edge (Vertex 5) (Vertex 7));
//check (Edge (Vertex 7) (Vertex 9));
//check (Edge (Vertex 7) (Vertex 10));
//check (Edge (Vertex 1) (Vertex 4));
//check (Edge (Vertex 6) (Vertex 4));
//check (Edge (Vertex 8) (Vertex 6));
//check (Edge (Vertex 10) (Vertex 8));
//check (Edge (Vertex 9) (Vertex 7));
//check (Edge (Vertex 7) (Vertex 5));
//check (Edge (Vertex 5) (Vertex 3));
//check (Edge (Vertex 3) (Vertex 1));
//check (Edge (Vertex 4) (Vertex 1));
//let mainGoal = Goal [] (TGraph (Graph vertexL vertexI edgeL (Edge2Form ant) (Edge2Form cons)));
//let binNodes = [];
//lemma "lemmaTMain" mainGoal;
//	by (gsteSymbSim binNodes);
//done 0;
quit;
let mainGoal = Goal [] (TGraph (Graph vertexL vertexI edgeL (Edge2Form ant) (Edge2Form cons)));
let binNodes = ["head<0>","head<1>","tail<0>","tail<1>"];
lemma "lemmaTMain" mainGoal;
	by (gsteSymbSim binNodes);
done 0;
quit;
