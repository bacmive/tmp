let ckt = load_exe "rsFIFO.exe";
load "gsteSymReduce.fl";
loadModel ckt;
let vertexI = Vertex 0;
let vertexL = [Vertex 0,Vertex 1,Vertex 3,Vertex 4,Vertex 5,Vertex 6,Vertex 7,Vertex 8,Vertex 9,Vertex 10];
let edgeL = [Edge (Vertex 0) (Vertex 1),Edge (Vertex 1) (Vertex 1),Edge (Vertex 3) (Vertex 3),Edge (Vertex 5) (Vertex 5),Edge (Vertex 7) (Vertex 7),Edge (Vertex 9) (Vertex 9),Edge (Vertex 1) (Vertex 3),Edge (Vertex 3) (Vertex 5),Edge (Vertex 5) (Vertex 7),Edge (Vertex 7) (Vertex 9),Edge (Vertex 9) (Vertex 7),Edge (Vertex 7) (Vertex 5),Edge (Vertex 5) (Vertex 3),Edge (Vertex 3) (Vertex 1),Edge (Vertex 1) (Vertex 4),Edge (Vertex 3) (Vertex 6),Edge (Vertex 5) (Vertex 8),Edge (Vertex 7) (Vertex 10),Edge (Vertex 10) (Vertex 8),Edge (Vertex 8) (Vertex 6),Edge (Vertex 6) (Vertex 4),Edge (Vertex 4) (Vertex 1)];
let ant aEdge = 
	val (Edge (Vertex from) (Vertex to)) = aEdge
	in 
	((from = 0) AND (to = 1)) => TAndList [Is1 "rst0",Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 1) AND (to = 1)) => TAndList [Is0 "rst0",Is0 "push0",Is0 "pop0",Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 3) AND (to = 3)) => TAndList [Is0 "rst0",Is0 "push0",Is0 "pop0",Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 5) AND (to = 5)) => TAndList [Is0 "rst0",Is0 "push0",Is0 "pop0",Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 7) AND (to = 7)) => TAndList [Is0 "rst0",Is0 "push0",Is0 "pop0",Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 9) AND (to = 9)) => TAndList [Is0 "rst0",Is0 "push0",Is0 "pop0",Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 1) AND (to = 3)) => TAndList [Is0 "rst0",Is1 "push0",Is0 "pop0",Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 3) AND (to = 5)) => TAndList [Is0 "rst0",Is1 "push0",Is0 "pop0",Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 5) AND (to = 7)) => TAndList [Is0 "rst0",Is1 "push0",Is0 "pop0",Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 7) AND (to = 9)) => TAndList [Is0 "rst0",Is1 "push0",Is0 "pop0",Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 9) AND (to = 7)) => TAndList [Is0 "rst0",Is0 "push0",Is1 "pop0",Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 7) AND (to = 5)) => TAndList [Is0 "rst0",Is0 "push0",Is1 "pop0",Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 5) AND (to = 3)) => TAndList [Is0 "rst0",Is0 "push0",Is1 "pop0",Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 3) AND (to = 1)) => TAndList [Is0 "rst0",Is0 "push0",Is1 "pop0",Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 1) AND (to = 4)) => TAndList [Is0 "rst0",Is1 "push0",Is0 "pop0",Guard (bvariable "din<1>0") (Is1 "dataIn<1>0"),Guard ((bNOT (bvariable "din<1>0"))) (Is0 "dataIn<1>0"),Guard (bvariable "din<0>0") (Is1 "dataIn<0>0"),Guard ((bNOT (bvariable "din<0>0"))) (Is0 "dataIn<0>0"),Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 3) AND (to = 6)) => TAndList [Is0 "rst0",Is1 "push0",Is0 "pop0",Guard (bvariable "din<1>0") (Is1 "dataIn<1>0"),Guard ((bNOT (bvariable "din<1>0"))) (Is0 "dataIn<1>0"),Guard (bvariable "din<0>0") (Is1 "dataIn<0>0"),Guard ((bNOT (bvariable "din<0>0"))) (Is0 "dataIn<0>0"),Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 5) AND (to = 8)) => TAndList [Is0 "rst0",Is1 "push0",Is0 "pop0",Guard (bvariable "din<1>0") (Is1 "dataIn<1>0"),Guard ((bNOT (bvariable "din<1>0"))) (Is0 "dataIn<1>0"),Guard (bvariable "din<0>0") (Is1 "dataIn<0>0"),Guard ((bNOT (bvariable "din<0>0"))) (Is0 "dataIn<0>0"),Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 7) AND (to = 10)) => TAndList [Is0 "rst0",Is1 "push0",Is0 "pop0",Guard (bvariable "din<1>0") (Is1 "dataIn<1>0"),Guard ((bNOT (bvariable "din<1>0"))) (Is0 "dataIn<1>0"),Guard (bvariable "din<0>0") (Is1 "dataIn<0>0"),Guard ((bNOT (bvariable "din<0>0"))) (Is0 "dataIn<0>0"),Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 10) AND (to = 8)) => TAndList [Is0 "rst0",Is0 "push0",Is1 "pop0",Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 8) AND (to = 6)) => TAndList [Is0 "rst0",Is0 "push0",Is1 "pop0",Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 6) AND (to = 4)) => TAndList [Is0 "rst0",Is0 "push0",Is1 "pop0",Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 4) AND (to = 1)) => TAndList [Is0 "rst0",Is0 "push0",Is1 "pop0",Is0 "CLK",Next (Is1 "CLK")] 
	| error "In cons: missing case"
;

let cons aEdge = 
	val (Edge (Vertex from) (Vertex to)) = aEdge
	in 
	((from = 0) AND (to = 1)) => TAndList [] 
	| ((from = 1) AND (to = 1)) => TAndList [Is1 "empty0",Is0 "full0"] 
	| ((from = 3) AND (to = 3)) => TAndList [Is0 "empty0",Is0 "full0"] 
	| ((from = 5) AND (to = 5)) => TAndList [Is0 "empty0",Is0 "full0"] 
	| ((from = 7) AND (to = 7)) => TAndList [Is0 "empty0",Is0 "full0"] 
	| ((from = 9) AND (to = 9)) => TAndList [Is0 "empty0",Is1 "full0"] 
	| ((from = 1) AND (to = 3)) => TAndList [Is1 "empty0",Is0 "full0"] 
	| ((from = 3) AND (to = 5)) => TAndList [Is0 "empty0",Is0 "full0"] 
	| ((from = 5) AND (to = 7)) => TAndList [Is0 "empty0",Is0 "full0"] 
	| ((from = 7) AND (to = 9)) => TAndList [Is0 "empty0",Is0 "full0"] 
	| ((from = 9) AND (to = 7)) => TAndList [Is0 "empty0",Is1 "full0"] 
	| ((from = 7) AND (to = 5)) => TAndList [Is0 "empty0",Is0 "full0"] 
	| ((from = 5) AND (to = 3)) => TAndList [Is0 "empty0",Is0 "full0"] 
	| ((from = 3) AND (to = 1)) => TAndList [Is0 "empty0",Is0 "full0"] 
	| ((from = 1) AND (to = 4)) => TAndList [Is1 "empty0",Is0 "full0"] 
	| ((from = 3) AND (to = 6)) => TAndList [Is0 "empty0",Is0 "full0"] 
	| ((from = 5) AND (to = 8)) => TAndList [Is0 "empty0",Is0 "full0"] 
	| ((from = 7) AND (to = 10)) => TAndList [Is0 "empty0",Is0 "full0"] 
	| ((from = 10) AND (to = 8)) => TAndList [Is0 "empty0",Is1 "full0"] 
	| ((from = 8) AND (to = 6)) => TAndList [Is0 "empty0",Is0 "full0"] 
	| ((from = 6) AND (to = 4)) => TAndList [Is0 "empty0",Is0 "full0"] 
	| ((from = 4) AND (to = 1)) => TAndList [Guard (bvariable "din<1>0") (Is1 "dataOut<1>0"),Guard ((bNOT (bvariable "din<1>0"))) (Is0 "dataOut<1>0"),Guard (bvariable "din<0>0") (Is1 "dataOut<0>0"),Guard ((bNOT (bvariable "din<0>0"))) (Is0 "dataOut<0>0")] 
	| error "In cons: missing case"
;

	
let tag aVert=
    val (Vertex n) = aVert in
    (n = 0) => []
    |(n = 1) => [[Is1 "empty0",Is0 "tail<1>0",Is0 "tail<0>0"]]
    |(n = 3) => [[Is0 "empty0",Is0 "tail<1>0",Is0 "tail<0>0"]]
    |(n = 4) => [[Is0 "empty0",Is0 "tail<1>0",Is0 "tail<0>0",Guard (bvariable "din<1>0") (Is1 "mem<*0*><1>0"),Guard ((bNOT (bvariable "din<1>0"))) (Is0 "mem<*0*><1>0"),Guard (bvariable "din<0>0") (Is1 "mem<*0*><0>0"),Guard ((bNOT (bvariable "din<0>0"))) (Is0 "mem<*0*><0>0")]]
    |(n = 5) => [[Is0 "empty0",Is0 "tail<1>0",Is1 "tail<0>0"]]
    |(n = 6) => [[Is0 "empty0",Is0 "tail<1>0",Is1 "tail<0>0",Guard (bvariable "din<1>0") (Is1 "mem<*0*><1>0"),Guard ((bNOT (bvariable "din<1>0"))) (Is0 "mem<*0*><1>0"),Guard (bvariable "din<0>0") (Is1 "mem<*0*><0>0"),Guard ((bNOT (bvariable "din<0>0"))) (Is0 "mem<*0*><0>0")]]
    |(n = 7) => [[Is0 "empty0",Is1 "tail<1>0",Is0 "tail<0>0"]]
    |(n = 8) => [[Is0 "empty0",Is1 "tail<1>0",Is0 "tail<0>0",Guard (bvariable "din<1>0") (Is1 "mem<*0*><1>0"),Guard ((bNOT (bvariable "din<1>0"))) (Is0 "mem<*0*><1>0"),Guard (bvariable "din<0>0") (Is1 "mem<*0*><0>0"),Guard ((bNOT (bvariable "din<0>0"))) (Is0 "mem<*0*><0>0")]]
    |(n = 9) => [[Is0 "empty0",Is1 "tail<1>0",Is1 "tail<0>0"]]
    |(n = 10) => [[Is0 "empty0",Is1 "tail<1>0",Is1 "tail<0>0",Guard (bvariable "din<1>0") (Is1 "mem<*0*><1>0"),Guard ((bNOT (bvariable "din<1>0"))) (Is0 "mem<*0*><1>0"),Guard (bvariable "din<0>0") (Is1 "mem<*0*><0>0"),Guard ((bNOT (bvariable "din<0>0"))) (Is0 "mem<*0*><0>0")]] 
    | error "no such node"
;

let steSymbSimGoalfDirct ckt goal =
    	val (Goal bAnts assert) = goal 
in    val (TImply ant cons) = assert 
in    let ant = trajForm2FiveTuples ant 
in    let bP = itlist (\bant. \b. bant bAND b) bAnts bT 
in    let cons = trajForm2FiveTuples (Guard bP cons) 
then
  	//print ("ant\n"^(trajFiveTuple2Str ant)^"\n") fseq
  	//print ("cons\n"^(trajFiveTuple2Str cons)^"\n") fseq
   	(STE "-w -y -S"  ckt [] ant cons []) => T  
|	F
;

letrec check_helper [] ant0 = F
/\ check_helper (cons0:conss) ant0 =
	let tmpGoal = (Goal [] (TImply ant0 (cons0))) in
	(steSymbSimGoalfDirct ckt tmpGoal) => T 
	| check_helper conss ant0
;
letrec check_next_ant conss [] = T 
/\ check_next_ant conss (ant:antss) =
	let res = check_helper conss ant in
	res => check_next_ant conss antss
	| F
;
let check aEdge = 
	val (Edge from to) = aEdge in
	val (Vertex n) = from in
	val (Vertex n') = to in
	let antss = map (\x. TAndList ((ant aEdge): x)) (tag from) in
	let conss = map (\x. TAndList ((cons aEdge):(map Next x))) (tag to) in
	check_next_ant conss antss => T 
	| F
;
itlist (\x. \y. x AND y) (map (\e. check e) edgeL) T;
quit;
