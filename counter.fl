//load "lib.fl";

//-------------------------------------------------------------------------------//
let ckt = load_exe "counter.exe";
load "gsteSymReduce.fl";
loadModel ckt;

//structure parametres
let DLEN = 2;
let last = 3;

//-------------------------------------------------------------------------------//

//actions of assertion graph
let myclk = TAndList [Is0 "CLK",Next (Is1 "CLK")];
let rst = TAndList [Is1 "rst0", myclk];
let nrst = TAndList [Is0 "rst0", myclk];
let dout0 = TAndList [ Is0 "dout<1>0", Is0 "dout<0>0"];
let dout1 = TAndList [ Is0 "dout<1>0", Is1 "dout<0>0"]; 
let dout2 = TAndList [ Is1 "dout<1>0", Is0 "dout<0>0"]; 
let dout3 = TAndList [ Is1 "dout<1>0", Is1 "dout<0>0"];

//main assertion graph
let vertexI = Vertex 0;
let vertexL = vertexI : (map (\i. Vertex i)) (1 upto (last + 1));
let edgeL = [Edge vertexI (Vertex 1)]
			@ (map (\i. Edge (Vertex i) (Vertex (i+1))) (1 upto last))
			@ [Edge (Vertex (last+1)) (Vertex 1)];


let ant aEdge =
	val (Edge (Vertex from) (Vertex to)) = aEdge
	in
	( (from = 0) AND (to = 1) ) => rst
	| ( (from = 1) AND (to = 2) ) => nrst
		| ( (from = 2) AND (to = 3) )  => nrst
			| ( (from = 3) AND (to = 4) ) => nrst
				| nrst
;

let cons aEdge = 
	val (Edge (Vertex from) (Vertex to)) = aEdge
	in
	( (from = 0) AND (to = 1) ) => TAndList []
	| ( (from = 1) AND (to = 2) ) => dout0
		| ( (from = 2) AND (to = 3) )  => dout1
			| ( (from = 3) AND (to = 4) ) => dout2
				| dout3
;

//call gste symbolic simulation
let mainGoal = Goal [] (TGraph (Graph vertexL vertexI edgeL (Edge2Form ant) (Edge2Form cons)));
let binNodes = [];
lemma "lemmaTMain" mainGoal;
	by (gsteSymbSim binNodes);
done 0;
quit;
