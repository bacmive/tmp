
let ckt = load_exe "rbfifo.exe";
load "gsteSymReduce.fl";
loadModel ckt;
let vertexI = Vertex 0;
let vertexL = [Vertex 0,Vertex 1,Vertex 3,Vertex 4,Vertex 5,Vertex 6,Vertex 7,Vertex 8,Vertex 9,Vertex 10];
let edgeL = [Edge (Vertex 1) (Vertex 1),Edge (Vertex 1) (Vertex 1),Edge (Vertex 3) (Vertex 3),Edge (Vertex 5) (Vertex 5),Edge (Vertex 7) (Vertex 7),Edge (Vertex 9) (Vertex 9),Edge (Vertex 1) (Vertex 3),Edge (Vertex 3) (Vertex 5),Edge (Vertex 5) (Vertex 7),Edge (Vertex 7) (Vertex 9),Edge (Vertex 9) (Vertex 7),Edge (Vertex 7) (Vertex 5),Edge (Vertex 5) (Vertex 3),Edge (Vertex 3) (Vertex 1),Edge (Vertex 1) (Vertex 4),Edge (Vertex 3) (Vertex 6),Edge (Vertex 5) (Vertex 8),Edge (Vertex 7) (Vertex 10),Edge (Vertex 10) (Vertex 8),Edge (Vertex 8) (Vertex 6),Edge (Vertex 6) (Vertex 4),Edge (Vertex 4) (Vertex 2)];
let ant aEdge = 
	val (Edge (Vertex from) (Vertex to)) = aEdge
	in 
	((from = 0) AND (to = 1)) => TAndList [Is1 "rst0",Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 1) AND (to = 1)) => TAndList [Is0 "rst0",Is0 "push0",Is0 "pop0",Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 3) AND (to = 3)) => TAndList [Is0 "rst0",Is0 "push0",Is0 "pop0",Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 5) AND (to = 5)) => TAndList [Is0 "rst0",Is0 "push0",Is0 "pop0",Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 7) AND (to = 7)) => TAndList [Is0 "rst0",Is0 "push0",Is0 "pop0",Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 9) AND (to = 9)) => TAndList [Is0 "rst0",Is0 "push0",Is0 "pop0",Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 1) AND (to = 3)) => TAndList [Is0 "rst0",Is1 "push0",Is0 "pop0",Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 3) AND (to = 5)) => TAndList [Is0 "rst0",Is1 "push0",Is0 "pop0",Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 5) AND (to = 7)) => TAndList [Is0 "rst0",Is1 "push0",Is0 "pop0",Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 7) AND (to = 9)) => TAndList [Is0 "rst0",Is1 "push0",Is0 "pop0",Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 9) AND (to = 7)) => TAndList [Is0 "rst0",Is0 "push0",Is1 "pop0",Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 7) AND (to = 5)) => TAndList [Is0 "rst0",Is0 "push0",Is1 "pop0",Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 5) AND (to = 3)) => TAndList [Is0 "rst0",Is0 "push0",Is1 "pop0",Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 3) AND (to = 1)) => TAndList [Is0 "rst0",Is0 "push0",Is1 "pop0",Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 1) AND (to = 4)) => TAndList [Is0 "rst0",Is1 "push0",Is0 "pop0",Guard (bvariable "din<1>0") (Is1 "dataIn<1>0"),Guard ((bNOT (bvariable "din<1>0"))) (Is0 "dataIn<1>0"),Guard (bvariable "din<0>0") (Is1 "dataIn<0>0"),Guard ((bNOT (bvariable "din<0>0"))) (Is0 "dataIn<0>0"),Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 3) AND (to = 6)) => TAndList [Is0 "rst0",Is1 "push0",Is0 "pop0",Guard (bvariable "din<1>0") (Is1 "dataIn<1>0"),Guard ((bNOT (bvariable "din<1>0"))) (Is0 "dataIn<1>0"),Guard (bvariable "din<0>0") (Is1 "dataIn<0>0"),Guard ((bNOT (bvariable "din<0>0"))) (Is0 "dataIn<0>0"),Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 5) AND (to = 8)) => TAndList [Is0 "rst0",Is1 "push0",Is0 "pop0",Guard (bvariable "din<1>0") (Is1 "dataIn<1>0"),Guard ((bNOT (bvariable "din<1>0"))) (Is0 "dataIn<1>0"),Guard (bvariable "din<0>0") (Is1 "dataIn<0>0"),Guard ((bNOT (bvariable "din<0>0"))) (Is0 "dataIn<0>0"),Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 7) AND (to = 10)) => TAndList [Is0 "rst0",Is1 "push0",Is0 "pop0",Guard (bvariable "din<1>0") (Is1 "dataIn<1>0"),Guard ((bNOT (bvariable "din<1>0"))) (Is0 "dataIn<1>0"),Guard (bvariable "din<0>0") (Is1 "dataIn<0>0"),Guard ((bNOT (bvariable "din<0>0"))) (Is0 "dataIn<0>0"),Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 10) AND (to = 8)) => TAndList [Is0 "rst0",Is0 "push0",Is1 "pop0",Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 8) AND (to = 6)) => TAndList [Is0 "rst0",Is0 "push0",Is1 "pop0",Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 6) AND (to = 4)) => TAndList [Is0 "rst0",Is0 "push0",Is1 "pop0",Is0 "CLK",Next (Is1 "CLK")] 
	| ((from = 4) AND (to = 2)) => TAndList [Is0 "rst0",Is0 "push0",Is1 "pop0",Is0 "CLK",Next (Is1 "CLK")] 
	| error "In cons: missing case"
;

let cons aEdge = 
	val (Edge (Vertex from) (Vertex to)) = aEdge
	in 
	((from = 0) AND (to = 1)) => TAndList [] 
	| ((from = 1) AND (to = 1)) => TAndList [Is1 "empty0",Is0 "full0"] 
	| ((from = 3) AND (to = 3)) => TAndList [Is0 "empty0",Is0 "full0"] 
	| ((from = 5) AND (to = 5)) => TAndList [Is0 "empty0",Is0 "full0"] 
	| ((from = 7) AND (to = 7)) => TAndList [Is0 "empty0",Is0 "full0"] 
	| ((from = 9) AND (to = 9)) => TAndList [Is0 "empty0",Is1 "full0"] 
	| ((from = 1) AND (to = 3)) => TAndList [Is1 "empty0",Is0 "full0"] 
	| ((from = 3) AND (to = 5)) => TAndList [Is0 "empty0",Is0 "full0"] 
	| ((from = 5) AND (to = 7)) => TAndList [Is0 "empty0",Is0 "full0"] 
	| ((from = 7) AND (to = 9)) => TAndList [Is0 "empty0",Is0 "full0"] 
	| ((from = 9) AND (to = 7)) => TAndList [Is0 "empty0",Is1 "full0"] 
	| ((from = 7) AND (to = 5)) => TAndList [Is0 "empty0",Is0 "full0"] 
	| ((from = 5) AND (to = 3)) => TAndList [Is0 "empty0",Is0 "full0"] 
	| ((from = 3) AND (to = 1)) => TAndList [Is0 "empty0",Is0 "full0"] 
	| ((from = 1) AND (to = 4)) => TAndList [] 
	| ((from = 3) AND (to = 6)) => TAndList [] 
	| ((from = 5) AND (to = 8)) => TAndList [] 
	| ((from = 7) AND (to = 10)) => TAndList [] 
	| ((from = 10) AND (to = 8)) => TAndList [] 
	| ((from = 8) AND (to = 6)) => TAndList [] 
	| ((from = 6) AND (to = 4)) => TAndList [] 
	| ((from = 4) AND (to = 2)) => TAndList [Guard (bvariable "din<1>0") (Is1 "dataOut<1>0"),Guard ((bNOT (bvariable "din<1>0"))) (Is0 "dataOut<1>0"),Guard (bvariable "din<0>0") (Is1 "dataOut<0>0"),Guard ((bNOT (bvariable "din<0>0"))) (Is0 "dataOut<0>0")] 
	| error "In cons: missing case"
;


let mainGoal = Goal [] (TGraph (Graph vertexL vertexI edgeL (Edge2Form ant) (Edge2Form cons)));
let binNodes = [];
lemma "lemmaTMain" mainGoal;
	by (gsteSymbSim binNodes);
done 0;
quit;
